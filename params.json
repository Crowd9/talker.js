{"name":"Talker.js","tagline":"A tiny, promise-based library for cross-origin communication between frames and windows.","body":"Talker.js wraps `postMessage` in an easy-to-use API. It handles queueing your messages until it completes a handshake so it knows both sides are ready, it filters out messages that aren't from Talker on the other side, and it is built on [JavaScript Promises](https://kerricklong.com/talks/javascript-promises-thinking-sync-in-an-async-world.html), so you can send a request and receive a response.\r\n\r\n## Using Talker.js\r\n\r\nThe `Talker` constructor takes a `window`, and an origin (or `'*'` to accept messages from any origin).\r\n\r\n```\r\nvar talker = new Talker(myFrame.contentWindow, 'http://example.com/');\r\n```\r\n\r\n### Sending Messages\r\n\r\nUse `Talker#send` to send a message to the other side. Messages have a namespace for organization, and can have an object sent for data transfer. The object must be able to pass through `JSON.stringify`.\r\n\r\n```\r\ntalker.send('myNamespace', { data: 'here' });\r\n```\r\n\r\n### Listening for Messages\r\n\r\nTalker will call `Talker#onMessage` with a `Talker.IncomingMessage`. That message has properties for the `namespace` and `data` it was originally sent with, as well as an `id` and a reference to its `talker`.\r\n\r\n```\r\ntalker.onMessage = function(message) {\r\n  console.log(message.namespace, message.data);\r\n  console.log(message.id, message.talker);\r\n};\r\n```\r\n\r\n### Responding to Messages\r\n\r\nUse `Talker.IncomingMessage#respond` to respond to a message with an object. This returns a promise via [PinkySwear.js](https://github.com/timjansen/PinkySwear.js) that may resolve with a response if one is sent, or may reject with an error.\r\n\r\n```\r\ntalker.onMessage = function(message) {\r\n  message.respond({ hello: 'there' });\r\n};\r\n\r\ntalker.send('localStorage', { get: 'username' })\r\n  .then(function(message) {\r\n    console.log(message.namespace, message.data);\r\n    console.log(message.id, message.talker);\r\n  }, function(error) {\r\n    console.error(error);\r\n  })\r\n;\r\n```\r\n\r\n### Getting Talker\r\n\r\nTalker.js distributions are available via [Bower](http://bower.io/search/?q=talkerjs) and [GitHub](https://github.com/secondstreet/talker.js/releases). The source is also [on GitHub](https://github.com/secondstreet/talker.js). Talker is available as a global, a named or anonymous AMD package, or a Common JS package.\r\n\r\n```\r\n$ bower install talkerjs --save\r\n```\r\n\r\nIf you'd like to contribute, please [Fork us on GitHub](https://github.com/secondstreet/talker.js), or [file an issue](https://github.com/secondstreet/talker.js/issues/new) with any bug reports or feature requests.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}